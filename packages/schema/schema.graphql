input AuthenticateFacebookUserInput {
  token: String!
  expires: Int!
  permissions: [String!]!
  clientMutationId: String
}

type AuthenticateFacebookUserPayload {
  error: String
  user: User
  token: String
  clientMutationId: String
}

enum Gender {
  MALE
  FEMALE
}

type Location {
  type: String!
  coordinates: [Float]!
}

input LocationInput {
  type: String!
  coordinates: [Float]!
}

"""The root of all mutations"""
type Mutation {
  """Login user into Animavita using Facebook credentials"""
  authenticateFacebookUser(input: AuthenticateFacebookUserInput!): AuthenticateFacebookUserPayload

  """Register a new pet into the platform"""
  registerPetMutation(input: RegisterPetMutationInput!): RegisterPetMutationPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Animavita pet"""
type Pet implements Node {
  """The ID of an object"""
  id: ID!

  """The animal name"""
  name: String!

  """The animal location"""
  location: Location!

  """The animal gender"""
  gender: Gender!

  """The animal type"""
  specie: Specie!

  """The animal age"""
  age: Int

  """The animal size"""
  size: Size

  """The animal photos"""
  photos: [String!]!

  """A short description about the animal"""
  description: String
}

"""The root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  user(id: ID!): User
  me: User
}

input RegisterPetMutationInput {
  name: String!
  gender: Gender!
  location: LocationInput!
  photos: [String!]
  specie: Specie!
  age: Int!
  description: String!
  clientMutationId: String
}

type RegisterPetMutationPayload {
  pet: Pet
  clientMutationId: String
}

enum Size {
  SMALL
  MEDIUM
  BIG
}

enum Specie {
  DOG
  CAT
  OTHER
}

"""Animavita user"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """The name of the user"""
  name: String!

  """The user's email"""
  email: String!

  """The user's profile image """
  profileImage: String
}
